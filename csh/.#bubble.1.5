#!/bin/tcsh
#=======================================================================
#+
# NAME: 
#   bubble
#
# PURPOSE:
#   Generate .bbl file for a given bibtex database (.bib file) - or a 
#   subset of this database defined by the citation commands in a given
#   latex file.
#
# COMMENTS:
#   Needs apj.bst style file to be on the tex path, wgets it otherwise
# 
# INPUTS:
#   database.bib		Bibtex database
#   
# OPTIONAL INPUTS:
#   -f file.tex		  TeX file containing bibtex citation keys
#   -s --shorten-bibfile  Produce a reduced version of the bibtex database
#
# OUTPUTS:
#   *.bbl			Bibliography database; file.bbl can be \input 
#                       into file.tex
#
# EXAMPLES:
#   > bubble references.bib
#   ...
#   bubble: wrote 243 bibitems to references.bbl
#
#   > bubble -f paper.tex references.bib
#   ...
#   bubble: wrote 17 bibitems to paper.bbl
#
# BUGS:
#   - dependence on apj.bst is hard-coded: should be able to provide
#     arbitrary bst file
#
# REVISION HISTORY:
#   2005-06-02  started Marshall (KIPAC)
#   2008-09-19  optional short database output Marshall (UCSB)
#-
#=======================================================================

# Options and arguments:

unset file
unset database
set auto = 1
set nrev = 0
set rev = ( 0 )
set help = 0
set shorten = 0
unalias rm
unalias mv
unalias cp

while ( $#argv > 0 )
   switch ($argv[1])
   case -h:        #  print help
      set help = 1
      shift argv
      breaksw
   case --{help}:  
      set help = 1
      shift argv
      breaksw
   case -f:        #  TeX file containing keys database
      shift argv
      set file = $argv[1]
      shift argv
      set auto = 0
      breaksw
   case --{texfile}:        
      shift argv
      set file = $argv[1]
      shift argv
      set auto = 0
      breaksw
   case --{shorten-bibfile}:        
      set shorten = 1
      shift argv
      breaksw
   case -s:        
      set shorten = 1
      shift argv
      breaksw
   case *:         #  The bibtex database: only keep last one in list
      set database = $argv[1]
      shift argv
      breaksw
   endsw
end

#-----------------------------------------------------------------------

# Catch stupidities:

if ( $help == 1 ) then
  print_script_header.csh $0
  goto FINISH
endif

if ( ! $?database ) then
  echo "bubble: no database supplied"
  echo "         bubble [-f file[.tex]] database.bib"
  goto finish
endif

if ( $auto == 0 ) then
 if ( ! -e $file:r.tex ) then 
  echo "bubble: latex file not found ($file:r.tex)"
  echo "         bubble [-f file[.tex]] database.bib"
  goto finish
 endif
endif

set darwin = 0
if ($OSTYPE == 'darwin') set darwin = 1

echo "bubble: setting BibTex database to be "$database

if ( ! -e $database ) then 
  echo "bubble: database not found"
  goto finish
endif

if ( $auto == 1 ) then 
  set file = $database
  echo "bubble: making .bbl file corresponding to $database"
endif

# Test for apj bibliography style file:

set x=`kpsewhich apj.bst`
if ( $x == '' ) then
  echo "bubble: apj.bst is not on your tex path"
  echo "        - putting it in the cwd right now...\n"
  set y=`which wget`
  if ( $y == '' ) then
    echo "bubble: ...except wget is not on your path - go home."
    goto finish
  else
    wget http://ads.harvard.edu/pubs/bibtex/astronat/apj/apj.bst
  endif
endif

# Keep output from latex/bibtex:

echo "bubble: output will be stored in bubble.output in case of a crash"
if ( -e bubble.output ) then
  rm bubble.output
endif

#-----------------------------------------------------------------------

if ( $auto == 0 ) then

# Extract list of keys from tex file:

  echo "bubble: generating $file:r.log with latex"

  if (-e $file:r.aux ) then
    \rm -f $file:r.aux $file:r.log $file:r.bbl
  endif
  touch $file:r.bbl
  echo 'x' | latex $file:r >>& bubble.output

  echo "bubble: reading keys from $file:r.log"

  set d1 = '`'
  set d2 = "'"
  set keys = `grep "Citation" $file:r.log | grep "undefined" | \
                cut -d$d1 -f2 | cut -d$d2 -f1 | sort | uniq` 

else 

# Extract list of keys from bib file:

  set keys = `grep -i -e "@ARTICLE" $database | \
                cut -d'{' -f2 | cut -d',' -f1 | sort | uniq` 

endif

# Write dummy tex file with reference to bibtex database:
# OS dependent! Darwin does not need double backslashes...

echo "bubble: writing dummy.tex"

if ( -e dummy.tex ) then
  \rm dummy.*
endif
echo "\documentclass{article} \
\usepackage{natbib}" > dummy.tex

if ($darwin) then 
  echo "\begin{document}" >> dummy.tex
else
  echo "\\begin{document}" >> dummy.tex
endif

set i=0
while ( $i < $#keys )
  @ i ++
  if ($darwin) then 
    echo "ApJ style does not support BibTex \cite{$keys[$i]}" >> dummy.tex 
  else
    echo "ApJ style does not support BibTex \\cite{$keys[$i]}" >> dummy.tex 
  endif
end

if ($darwin) then 
  echo "\bibliography{$database:r} \
\bibliographystyle{apj} \
\end{document}" >> dummy.tex
else
  echo "\\bibliography{$database:r} \
\\bibliographystyle{apj} \
\\end{document}" >> dummy.tex
endif

# Run latex and bibtex to generate dummy.bbl:

echo "bubble: generating dummy.bbl with latex and bibtex"
echo 'x' | latex dummy >>& bubble.output
bibtex dummy >>& bubble.output

# Re-name for \input into tex file:

cp dummy.bbl $file:r.bbl

# Clean up:

grep "Warning--I" bubble.output | sed s/Warning--I/bubble:\ bibtex/g

set n = `grep bibitem $file:r.bbl | wc -l`
echo "bubble: wrote $n bibitems to $file:r.bbl"

# Make reduced version of bibtex file if required:

if ($shorten) then
  echo "bubble: generating reduced version of bibtex database..."
  set shortdatabase = $file:r.short.bib
  \rm -f $shortdatabase ; touch $shortdatabase
  set junk = dummy.tmp ; \rm -f $junk
  set n = 0
  set i = 0
  while ( $i < $#keys )
    @ i ++
    set firstlines = `grep -n "{$keys[$i]," $database | grep -v '%' | cut -d':' -f1`
    if ($#firstlines > 1) then
      echo "bubble: WARNING: found $#firstlines instances of key $keys[$i] in database"
    endif
    foreach j ( $firstlines )
      tail +$j $database >! $junk
      set lastline = `grep -n '@' $junk | cut -d':' -f1 | head -2 | tail -1`
      @ lastline --
      head -$lastline $junk >> $shortdatabase
      echo "" >> $shortdatabase
      @ n ++
    end
  end    
  echo "bubble: wrote $n entries to $shortdatabase"
endif

rm -f dummy.* bubble.output

finish:

#=======================================================================
