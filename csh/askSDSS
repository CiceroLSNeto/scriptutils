#!/bin/tcsh
#=======================================================================
#+
# NAME:
#   askSDSS
#
# PURPOSE:
#   Query SDSS website for finding charts, object information, data etc.
#
# COMMENTS:
#
# USAGE:
#       askSDSS [-f -i -c -s -h -x][-r radius -m maglimit] ra dec
#
# INPUTS:
#   ra dec                 position of object in degrees
#
# OPTIONAL INPUTS:
#   -i --images            return FITS images (typically ugriz)
#   -j --jpg               return jpg image, no annotation
#   -f --finding-chart     return finding chart (jpg)
#   --csv                  return object catalogue (csv)
#   -c --catalogue         return object catalogue (reformatted text)
#   -s --star-list         return observing file (Keck AO style)
#   -w --field-size     w  field size / arcmin
#   -r --search-radius  r  search radius for stars / arcsec
#   -V --use-V-mag         Use Vega V band mag for star list, not R
#   -m --mag-limit      m  magnitude limit (R-band Vega, unless -V)
#   --invert               invert colour scale of image
#   --hms                  coords supplied in hms dms not degrees
#   -x --clobber           overwrite current versions
#   -n --name              provide parsable IAU-style name instead of ra/dec
#   -h --help
#   --dry-run              Do everything except the downloads
#
# OUTPUTS:
#   SDSShhmmss.pp+ddmmss.s_13x10arcmin_?.fits
#   SDSShhmmss.pp+ddmmss.s_rxrarcmin.jpg
#   SDSShhmmss.pp+ddmmss.s_rxrarcmin_R.gt.m.cat
#
# EXAMPLES:
#
#   Virgo cluster:
#
#     askSDSS --finding-chart --field-size 45 --hms 12:30:49.4 +12:23:28
#
#     askSDSS --catalogue --field-size 12 --hms 12:30:49.4 +12:23:28
# 
#
# DEPENDENCIES:
#   
#   skycoor, wget
#
# BUGS:
#   - Vega R band selection is very approximate, esp at cvs catalogue stage
#   - No message printed to screen if image generation fails because target
#     is outside SDSS area.
#   - Since moving to DR10, object catalogs no longer work :-/
#  
# REVISION HISTORY:
#   2006-06-12  started Marshall (KIPAC)
#   2008-06-18  upgraded to DR6 Marshall (UCSB)
#   2008-07-23  catalogue generation, including photo-z Marshall (UCSB)
#   2008-10-31  upgraded to DR7 Marshall (UCSB)
#   2013-02-23  upgraded to DR9 Marshall (Oxford)
#   2013-08-08  upgraded to DR10 Marshall (KIPAC)
#-
#=======================================================================

# Options and arguments:

set narg = $#argv

# Set defaults:

unset ra0
unset dec0

# set DRX = 'dr9'
set DRX = 'dr10'

set usename = 0
set name = 0

set jpg = 0
set finding = 0
set csv = 0
set catalogue = 0
set starlist = 0
set images = 0

set klobber = 0 

set maglimit = 18
set field = 3
set invert = 0
set hms = 0

set maxsep = 60
set useV = 0

set help = 0
set dryrun = 0

#Escape shell defaults
unset noclobber
unalias rm

# Parse command line:

while ( $#argv > 0 )
   switch ($argv[1])
   case -h:           #  print help
      set help = 1
      shift argv
      breaksw
   case --{help}:  
      set help = 1
      shift argv
      breaksw
   case --{dry-run}:  
      set dryrun = 1
      shift argv
      breaksw
   case -j:        #  jpg image
      shift argv
      set jpg = 1
      breaksw
   case --{jpg}:   
      shift argv
      set jpg = 1
      breaksw
   case -f:        #  finding chart
      shift argv
      set finding = 1
      breaksw
   case --{finding-chart}:   
      shift argv
      set finding = 1
      breaksw
   case --{csv}:   #  object catalogue - csv
      shift argv
      set csv = 1
      breaksw
   case -c:        #  object catalogue - reformatted text
      shift argv
      set catalogue = 1
      breaksw
   case --{catalogue}:       
      shift argv
      set catalogue = 1
      breaksw
   case -s:        #  star list
      shift argv
      set starlist = 1
      breaksw
   case --{star-list}:       
      shift argv
      set starlist = 1
      breaksw
   case -i:        
      shift argv
      set images = 1
      breaksw
   case --{images}:        
      shift argv
      set images = 1
      breaksw
   case -w:        #  field size
      shift argv
      set field = $argv[1]
      shift argv
      breaksw
   case --{field-size}:
      shift argv
      set field = $argv[1]
      shift argv
      breaksw
   case -r:        #  search radius
      shift argv
      set maxsep = $argv[1]
      shift argv
      breaksw
   case --{search-radius}:
      shift argv
      set maxsep = $argv[1]
      shift argv
      breaksw
   case -m:        #  magnitude limit
      shift argv
      set maglimit = $argv[1]
      shift argv
      breaksw
   case --{mag-limit}:
      shift argv
      set maglimit = $argv[1]
      shift argv
      breaksw
   case -V:        #  Use Vega V mag for star selection?       
      shift argv
      set useV = 1
      breaksw
   case --{use-V-mag}:           
      shift argv
      set useV = 1
      breaksw
   case --{invert}: #  Invert colour scale?       
      shift argv
      set invert = 1
      breaksw
   case --{hms}:   #  Coords input in hms dms?       
      shift argv
      set hms = 1
      breaksw
   case -x:        #  Clobber?
      shift argv
      set klobber = 1
      breaksw
   case --{clobber}:        
      shift argv
      set klobber = 1
      breaksw
   case -n:  # Input is name, not ra/dec!      
      shift argv
      set usename = 1
      set name = $argv[1]
      shift argv
      set ra0 = -99
      set dec0 = -99
      breaksw
   case --{name}:  
      shift argv
      set usename = 1
      set name = $argv[1]
      shift argv
      set ra0 = -99
      set dec0 = -99
      breaksw
   case *:         #  ra and dec!
      if ($usename == 0) then
        set ra0 = $argv[1]
        shift argv
        set dec0 = $argv[1]
        shift argv
      else
        shift argv
      endif  
      breaksw
   endsw
end

#-----------------------------------------------------------------------
SETUP:

if ( $help || $narg < 2 ) then
  print_script_header.csh $0
  goto FINISH
endif

echo "askSDSS: query the SDSS website for images, catalogues and spectra"

# Check for software availabity:

set nowget = `which wget |& grep "not found" | wc -l`
if ($nowget) then
  echo "${0:t:r}: ERROR: no wget for submitting data to web"
  goto FINISH
endif
set noskycoor =  `which skycoor |& grep "not found" | wc -l` 
if ($noskycoor) then
  echo "${0:t:r}: ERROR: no skycoor program for translating coordinates"
  echo "${0:t:r}: You can download it from: \
  http://tdc-www.harvard.edu/software/wcstools/skycoor.html"
  goto FINISH
endif


# Parse inputs:

if ( ! $?ra0 ) then
  echo "askSDSS: no RA specified"
  goto FINISH
endif
if ( ! $?dec0 ) then
  echo "askSDSS: no dec specified"
  goto FINISH
endif

# Convert supplied name into rahms/dechms:
if ($usename) then
  echo "askSDSS: interpreting supplied name: $name"
  set string = `echo $name | tr -d '[a-z,A-Z]'` 
  set positive = `echo $string | grep '+' | wc -l`
  if ($positive) then
    set decsign = '+'
  else  
    set decsign = '-'
  endif  
  set x = `echo $string | sed s/'-'/' '/g | sed s/'+'/' '/g`
  set nchars = `echo $x[1] | wc -c`
  if ($nchars < 4) then
    echo "ERROR: incomprehensible RA string: $x[1]"
  else
    set rah = `echo $x[1] | cut -c1-2`  
    set ram = `echo $x[1] | cut -c3-4`  
    set ras = `echo $x[1] | cut -c5-`
    if ($#ras == 0) set ras = '00.00'  
  endif
  set ra0 = "${rah}:${ram}:${ras}"
  set nchars = `echo $x[2] | wc -c`
  if ($nchars < 4) then
    echo "ERROR: incomprehensible Dec string: $x[2]"
  else
    set decd = `echo $x[2] | cut -c1-2`  
    set decm = `echo $x[2] | cut -c3-4`  
    set decs = `echo $x[2] | cut -c5-`  
    if ($#decs == 0) set decs = '00.0'  
  endif
  set dec0 = "${decsign}${decd}:${decm}:${decs}"
  set hms = 1
endif  

# Convert to degrees:
unset rahms
unset dechms
if ($hms) then

#   set rahms =  `echo "$ra0" | sed s/:/\ /g`
#   set dechms = `echo "$dec0" | sed s/\:/\ /g`
#   set positive = 1
#   set test = `echo $dec0 | grep '-' | wc -l`
#   if ($test) set positive = 0    
#    
#   set x = ( $rahms )
#   foreach i ( `seq 3` )
#     set a = `echo $x[$i] | cut -c 1` ; set b = `echo $x[$i] | cut -c 2` 
#     if ($a == 0) set x[$i] = $b
#   end
#   set ra0 = `echo "15.0 * ($x[1] + $x[2]/60.0 + $x[3]/3600.0)" | bc -l | cut -c 1-11`
#   set a = `echo $ra0 | cut -c 1` ; set b = `echo $ra0 | cut -c 2-`
#   if ( $a == '.' ) set ra0 = "0.$b"
# 
#   set x = ( `echo $dechms | sed s/-//g | sed s/+//g` )
#   foreach i ( `seq 3` )
#     set a = `echo $x[$i] | cut -c 1` ; set b = `echo $x[$i] | cut -c 2` ; set c = `echo $x[$i] | cut -c 3` 
#     if ($a == '-') then
#       set x[$i] = $b$c
#       set positive = 0
#       if ($b == 0) set x[$i] = $c
#     endif  
#     if ($a == 0) set x[$i] = $b
#   end
#   set dec0 = `echo "$x[1] + $x[2]/60.0 + $x[3]/3600.0" | bc -l | cut -c 1-12`
#   set a = `echo $dec0 | cut -c 1` ; set b = `echo $dec0 | cut -c 2-` 
#   if ( $a == '.' ) set dec0 = 0.$b
#   if ( ! $positive ) set dec0 = '-'$dec0

  set rahms =  `echo "$ra0" | sed s/':'/' '/g`
  set dechms = `echo "$dec0" | sed s/':'/' '/g`
  set line = `skycoor -d $ra0 $dec0`
  set ra0 = $line[1]
  set dec0 = $line[2]
  echo "askSDSS: required position: $ra0 $dec0"

endif 

if ($jpg)       echo "askSDSS: TODO: grab jpg image"
if ($finding)   echo "askSDSS: TODO: make finding chart"
if ($images)    echo "askSDSS: TODO: download images"
if ($starlist)  set catalogue = 1
if ($catalogue) set csv = 1
if ($csv)       echo "askSDSS: TODO: download object csv file"
if ($catalogue) echo "askSDSS: TODO: make custom object catalogue"
if ($starlist)  echo "askSDSS: TODO: make bright star list"

@ act = $jpg + $finding + $images + $csv
if ($act == 0) echo "askSDSS: no actual tasks specified, just returning IAU name"

if ($catalogue || $starlist) then
  if ($starlist) then
    echo "askSDSS: catalogue and starlist R-band Vega magnitude limit: $maglimit"
  else
    echo "askSDSS: catalogue i-band AB magnitude limit: $maglimit"
  endif  
  set MAXfield = 12
  set toobig = `echo "$field / ( $MAXfield - 0.001 )" | bc`
  if ($toobig > 0) then
    echo "askSDSS: WARNING: maximum field size for cataloguing is 12 arcmin"
    set field = $MAXfield
  endif
endif
echo "askSDSS: field size / arcmin: $field"

if ($starlist) echo "askSDSS: search radius / arcsec: $maxsep"
if ($klobber) echo "askSDSS: clobbering existing files"

#-----------------------------------------------------------------------
IAUNAME:

if ( ! $?rahms ) then
#   set rah = `echo "$ra0 / 15.0" | bc -l | cut -d'.' -f1`
#   set test = `echo $rah | wc -c` ; if ($test == 1) set rah = 0
#   set ram = `echo "($ra0 - $rah * 15.0)* 60.0 / 15.0" | bc -l | cut -d'.' -f1`
#   set ras = `echo "scale = 2; ($ra0 - $rah * 15.0 - $ram * 15.0 / 60.0) * 3600.0 / 15.0" | bc -l | cut -c1-5`
#   set test = `echo $rah | wc -c` ; if ($test == 2) set rah = 0$rah
#   set test = `echo $ram | wc -c` ; if ($test == 2) set ram = 0$ram
#   set test = `echo $ras | cut -d'.' -f1 | wc -c` ; if ($test == 2) set ras = 0$ras
  set line = `skycoor $ra0 $dec0`
  set rahms = `echo "$line[1]" | sed s/:/\ /g`
endif 
set rah = $rahms[1]
set ram = $rahms[2] 
set ras = `echo "$rahms[3]" | cut -c 1-5`

if ( ! $?dechms ) then
#   set positive = `echo "($dec0 / sqrt($dec0*$dec0) + 1.0)/2.0" | bc -l | cut -d'.' -f1`
#   if ($positive) then
#     set decsign = '+'
#   else
#     set decsign = '-'
#   endif 
#   set dec0 = `echo $dec0 | sed s/-//g`
#   set decd = `echo "$dec0" | cut -d'.' -f1`
#   set decm = `echo "($dec0 - $decd)* 60.0" | bc -l | cut -d'.' -f1`
#   set decs = `echo "scale = 2; ($dec0 - $decd - $decm / 60.0) * 3600.0" | bc -l | cut -c1-4`
#   set test = `echo $decd | wc -c` ; if ($test == 2) set decd = 0$decd
#   set test = `echo $decm | wc -c` ; if ($test == 2) set decm = 0$decm
#   set test = `echo $decs | cut -d'.' -f1 | wc -c` 
#   if ($test == 2) then
#     set decs = `echo "0$decs" | cut -c1-4`
#   endif
# # Don't forget to put sign back!
#   set dec0 = `echo "0.0 $decsign $dec0" | bc -l`
  set line = `skycoor $ra0 $dec0`
  set dechms = `echo "$line[2]" | sed s/:/\ /g`
endif
set decd = $dechms[1]
set decm = $dechms[2] 
set decs = `echo "$dechms[3]" | cut -c 1-4`
set decsign = ''
 
if ($hms == '0') then
  echo "askSDSS: ra (deg): $ra0"
  echo "askSDSS: dec (deg): $dec0"
endif

echo "askSDSS: ra (J2000): $rah $ram $ras"
echo "askSDSS: dec (J2000): $decd $decm $decs"

set name = "SDSSJ$rah$ram$ras$decsign$decd$decm$decs"

echo "askSDSS: IAU name of search position: $name"

set fileroot = ${name}_${field}x${field}arcmin

#-----------------------------------------------------------------------
IMAGES:

if ($images) then

  set imageroot = ${name}_13x10arcmin

# Need to query explore tool, and read the *frame* source to get the 
# FITS page id:

  set url = ""
  set url = "${url}http://cas.sdss.org/${DRX}/en/tools/explore/OETOC.asp?"
  set url = "${url}ra=${ra0}&"
  set url = "${url}dec=${dec0}"

  set htmlfile = ${imageroot}_explore.html
  set logfile = $htmlfile.log

  wget "$url" -O $htmlfile -o $logfile

# Now, read this html and find out where the FITS files are:

#   set string = `grep 'fitsimg.asp' $htmlfile | cut -d'"' -f8`
#   set url = "http://cas.sdss.org/${DRX}/en/tools/explore/${string}"
  set url = `grep 'the FITS file(s)' $htmlfile | cut -d'"' -f8`

  set htmlfile = ${imageroot}_fitsasp.html
  set logfile = $htmlfile.log

  wget "$url" -O $htmlfile -o $logfile

# OK, now have piece of html with FITS image addresses!

  set htmlsnippet = ${imageroot}_fitsasp.snippet.html
#   set i = `grep -n 'Corrected Frames' $htmlfile | cut -d':' -f1`
#   tail -n +$i $htmlfile | head -6 > $htmlsnippet
  grep 'dynamically generated' $htmlfile > $htmlsnippet
  
  set urls = `grep 'http' $htmlsnippet | cut -d'"' -f2`
#   set filters = `grep 'http' $htmlsnippet | cut -d'>' -f3 | cut -d'<' -f1` 
  set filters = `grep 'http' $htmlsnippet | cut -d'"' -f2 | cut -d'=' -f6` 

  echo "askSDSS: found $#filters FITS images:"
  echo "  filter   url"
  foreach i ( `seq $#filters` )
    echo "    $filters[$i]      $urls[$i]"
  end    

# Download FITS images - standard 10x13arcmin frames, 0.396" pixels:

  foreach i ( `seq $#filters` )

    set filter = $filters[$i]
    set url = "$urls[$i]"

    set fitsfile = ${imageroot}_${filter}_sci.fits
#     set gzfitsfile = $fitsfile.gz
    set logfile = ${fitsfile:r}_wget.log

    if ($klobber) then
      echo "askSDSS: clobbering old ${filter}-band FITS image"
#       \rm -f $fitsfile $gzfitsfile
      \rm -f $fitsfile
    endif

    if ( ! -e $fitsfile ) then

# Construct url and wget:

#       echo "askSDSS: downloading and gunzipping ${filter}-band FITS image..."
      echo "askSDSS: downloading ${filter}-band FITS image..."
#       wget "$url" -O $gzfitsfile -o $logfile
      wget "$url" -O $fitsfile -o $logfile
#       gunzip $gzfitsfile

    else
      echo "askSDSS: no image download is necessary"
    endif

    if ( ! -e $fitsfile ) then
      echo "askSDSS: ${filter}-band FITS image download failed"
      echo "askSDSS: read wget log:"
      echo "  $logfile"
      echo "askSDSS: check url:"
      echo "  $url"
      goto FINISH
    else 
      echo "askSDSS: ${filter}-band FITS image:"
      echo "  $fitsfile"
      \rm -f $logfile
    endif  

  end

# Clean up 
  touch junk.html junk.html.log ; \rm -f  *.html *.html.log

endif

#-----------------------------------------------------------------------
FINDINGCHART:

set grid = ''
set inv = ''
if ($finding) set grid = 'G'
if ($invert) set inv = 'I'

if ($finding || $jpg) then

# Download cutout image:

  set jpgfile = ${fileroot}.jpg
  set logfile = ${jpgfile:r}_wget.log

  if ($klobber) then
    echo "askSDSS: clobbering old jpg image"
    \rm -f $jpgfile
  endif
  
  if ( ! -e $jpgfile ) then

# Need to specify size of image. Scale is st that 1.0 gives field size of 
# about 8.4 arcmin or 500 arcsec, eg default field size (scale=0.39612)
# is about 200 arcsec. Actually its 512 pixels x 0.39612 arcsec per 
# pixel, so 202.8 arcsec. We want 3 arcmin cutouts, each 512 pixels square:

    set scale = `echo "$field * 60.0 / 512.0" | bc -l`
    set char = `echo $scale | cut -c 1` 
    if ( $char == '.' ) set scale = "0$scale"

# Construct url and wget:

    echo "askSDSS: downloading image..."
    set url = ""
#     set url = "${url}http://casjobs.sdss.org/ImgCutout${DRX}/getjpeg.aspx?"
    set url = "${url}http://skyservice.pha.jhu.edu/${DRX}/ImgCutout/getjpeg.aspx?"
    set url = "${url}ra=${ra0}&"
    set url = "${url}dec=${dec0}&"
    set url = "${url}scale=${scale}&"

    set url = "${url}opt=${inv}${grid}&"

    set url = "${url}width=512&height=512"
    if ($dryrun) then
        echo "askSDSS: Dry run! Image URL: $url"
    else
        wget "$url" -O $jpgfile -o $logfile
    endif
  
  else
    echo "askSDSS: no image download is necessary"
  endif

  if ( ! -e $jpgfile && $dryrun == 0 ) then
    echo "askSDSS: finding chart image download failed"
    echo "askSDSS: read wget log:"
    echo "  $logfile"
    echo "askSDSS: check url:"
    echo "  $url"
    goto FINISH
  else 
    echo "askSDSS: finding chart image:"
    echo "  $jpgfile"
  endif  

# Now provide URL to explorable chart:
  set url = ""
#   set url = "${url}http://casjobs.sdss.org/${DRX}/en/tools/chart/navi.asp?"
  set url = "${url}http://skyserver.sdss3.org/public/en/tools/chart/chart.asp?"
  set url = "${url}ra=${ra0}&"
  set url = "${url}dec=${dec0}&"
  set url = "${url}opt=${inv}${grid}&"
  echo "askSDSS: Explorer URL:"
  echo "  $url"

# Clean up 
if ( -e $logfile ) \rm $logfile

endif

#-----------------------------------------------------------------------
CSV:
    
if ($starlist) then
  if ($useV) then
    set rlimit = `echo "$maglimit + 0.3" | bc`
    set csvfile = ${fileroot}_V.lt.${maglimit}.csv
  else
    set rlimit = `echo "$maglimit + 0.3" | bc`
    set csvfile = ${fileroot}_R.lt.${maglimit}.csv
  endif  
else
  set rlimit = $maglimit
  set csvfile = ${fileroot}_i.lt.${rlimit}.csv
endif

if ($csv) then

# Download csv file:

  set logfile = ${csvfile:r}_wget.log

  if ($klobber) then
    echo "askSDSS: clobbering old object csv file"
    \rm -f $csvfile
  endif
  
  if ( ! -e $csvfile ) then

# Compute search box limits - not need to shave off a little from the box size 
# to give an almost 12 arcmin box...
    set dx = `echo "0.5 * ($field - 0.01) / 60.0" | bc -l`
    set x1 = `echo "$ra0 - $dx" | bc -l`
    set char = `echo $x1 | cut -c 1` ; if ( $char == '.' ) set x1 = "0$x1"
    set x2 = `echo "$ra0 + $dx" | bc -l`
    set char = `echo $x2 | cut -c 1` ; if ( $char == '.' ) set x2 = "0$x2"
    set dy = `echo "0.5 * ($field - 0.01) / 60.0" | bc -l`
    set y1 = `echo "${dec0} - $dy" | bc -l`
    set char = `echo $y1 | cut -c 1` ; if ( $char == '.' ) set y1 = "0$y1"
    set char = `echo $y1 | cut -c 1-2` ; if ( $char == '-.' ) set y1 = `echo $y1 | sed s/-./-0./g`
    set y2 = `echo "${dec0} + $dy" | bc -l`
    set char = `echo $y2 | cut -c 1` ; if ( $char == '.' ) set y2 = "0$y2"
    set char = `echo $y2 | cut -c 1-2` ; if ( $char == '-.' ) set y2 = `echo $y2 | sed s/-./-0./g`

# Construct url and wget:

    echo "askSDSS: downloading objects csv file..."
    set url = ""
#     set url = "${url}http://cas.sdss.org/astro/en/tools/search/x_rect.asp?"
    set url = "${url}http://skyserver.sdss3.org/public/en/tools/search/x_rect.asp?"
    set url = "${url}min_ra=${x1}&"
    set url = "${url}max_ra=${x2}&"
    set url = "${url}min_dec=${y1}&"
    set url = "${url}max_dec=${y2}&"
    set url = "${url}min_u=0&max_u=30.0&"
    set url = "${url}min_g=0&max_g=30.0&"
    if ($starlist) then
      set url = "${url}min_r=0&max_r=${rlimit}&"
      set url = "${url}min_i=0&max_i=${rlimit}&"
    else
      set url = "${url}min_r=0&max_r=30.0&"
      set url = "${url}min_i=0&max_i=${rlimit}&"
    endif  
    set url = "${url}min_z=0&max_z=30.0&"
    set url = "${url}entries=all&topnum=10&format=csv"
    wget "$url" -O $csvfile -o ${csvfile:r}_wget.log
    
    echo "$url"

  else
    echo "askSDSS: no csv file download is necessary"
    set url = 0
  endif

  if ( ! -e $csvfile ) then
    echo "askSDSS: object csv file download failed"
    echo "askSDSS: read wget log:"
    echo "  $logfile"
    echo "askSDSS: check url:"
    echo "  $url"
    goto FINISH
  else 
    echo "askSDSS: object csv file:"
    echo "  $csvfile"
  endif 
   
# Clean up 
  if ( -e $logfile ) \rm $logfile

# Flag failure to find objects:
  set none = `grep found $csvfile | wc -l`
  if ($none) then
    echo "askSDSS: no objects found"
    if ("$url" != 0) then
      echo "askSDSS: check url:"
      echo "  $url"
    endif  
  endif

endif

#-----------------------------------------------------------------------
CATALOGUE:

if ($catalogue) then

# Strip out relevant information from csv file, 
# and calculate secondary quantities.
    
  if ($none) then
    echo "askSDSS: no objects to be listed"
    goto ENDGAME
  endif
  
  set catalogue = ${csvfile:r}.cat

  if ($klobber) then
    echo "askSDSS: clobbering old catalogue"
    \rm -f $catalogue
  endif

  if ( ! -e $catalogue ) then
  
  # First set up directory and files to hold all the data:

    set dir = ${csvfile:r}_tmp
    mkdir -p $dir

    set pars = `head -1 $csvfile | sed s/,/\ /g`
    set k = 0
    while ( $k < $#pars)
      @ k ++
      cut -d',' -f $k $csvfile > $dir/$pars[$k].txt
    end

  # Offset calculation - convention is to quote numbers to be added to 
  # star position to get to target. 
  # Note that difference in RA needs multiplying by
  # cos(dec) to get the small angle separation on the sky. Postion angle is
  # not quite right as atan function is not complete...:

  # PJM 2006-06-29: use skycoor to do offsets and postion angles correctly
  # PJM 2008-06-24: Bug in skycoor? When ra > ra0, PA must be +ve

    set ra = `tail -n +2 $dir/ra.txt`
    set dec = `tail -n +2 $dir/dec.txt`

    if ($klobber) \rm -rf $dir/sep.txt

    if ( ! -e $dir/sep.txt ) then
      echo "askSDSS: calculating offsets..."
      echo "sep" > $dir/sep.txt
      echo "dx"  > $dir/dx.txt
      echo "dy"  > $dir/dy.txt
      set k = 0
      while ( $k < $#ra)
        @ k ++
# Star list: dx and dy from star to object:
#         set dr = `skycoor -r $ra[$k] $dec[$k] $ra0 $dec0 | awk '{printf "%.2f\n", $1}'`
#         set pa = `skycoor -a $ra[$k] $dec[$k] $ra0 $dec0 | awk '{printf "%.2f\n", $1}'`
# Object catalogue: dx and dy from object to star:
        set dr = `skycoor -r $ra0 $dec0 $ra[$k] $dec[$k] | awk '{printf "%.2f\n", $1}'`
        set pa = `skycoor -a $ra0 $dec0 $ra[$k] $dec[$k] | awk '{printf "%.2f\n", $1}'`
        set test = `echo $ra0 $ra[$k] | awk '{if($1 > $2) print 1}'` 
        if ($#test == 1) then 
          set pa = `echo $pa | awk '{print $1 * -1}'`
        endif
        set dx = `echo "$dr * s( $pa * 0.017453292 )" | bc -l | awk '{printf "%.2f\n", $1 * -1}'`
        set dy = `echo "$dr * c( $pa * 0.017453292 )" | bc -l | awk '{printf "%.2f\n", $1}'`
        echo $dr >> $dir/sep.txt
        echo $dx >> $dir/dx.txt
        echo $dy >> $dir/dy.txt
      end
    endif

    echo "askSDSS: doing photometry..."

    set g = `tail -n +2 $dir/g.txt`
    set r = `tail -n +2 $dir/r.txt`
    set i = `tail -n +2 $dir/i.txt`

  # Vega R band mag \approx mean of r and i, -0.2 mags:

    echo "Rvega" > $dir/Rvega.txt
    set k = 0
    while ( $k < $#r )
      @ k ++
      set mag = `echo "0.5 * ( $r[$k]  + $i[$k] ) - 0.2" | bc`
      echo $mag | awk '{printf "%.2f\n", $1}' >> $dir/Rvega.txt
    end

  # Vega V band mag \approx mean of g and r, -0.2 mags:

    echo "Vvega" > $dir/Vvega.txt
    set k = 0
    while ( $k < $#r )
      @ k ++
      set mag = `echo "0.5 * ( $g[$k]  + $r[$k] ) - 0.2" | bc`
      echo $mag | awk '{printf "%.2f\n", $1}' >> $dir/Vvega.txt
    end

  # g-r colour:

    echo "g-r" > $dir/g-r.txt
    set k = 0
    while ( $k < $#r )
      @ k ++
      set colour = `echo "$g[$k] - $r[$k]" | bc`
      set char = `echo $colour | cut -c 1` ; if ( $char == '.' ) set colour = "0$colour"
      echo $colour | awk '{printf "%.2f\n", $1}' >> $dir/g-r.txt
    end

#   Now construct list of objects, ordered by separation:

    set objid = `tail -n +2 $dir/objid.txt`
    set ra = `tail -n +2 $dir/ra.txt   | awk '{printf "%.5f\n", $1}'`
    set dec = `tail -n +2 $dir/dec.txt | awk '{printf "%.5f\n", $1}'`
    set sep = `tail -n +2 $dir/sep.txt`
    set dx = `tail -n +2 $dir/dx.txt`
    set dy = `tail -n +2 $dir/dy.txt`
    set u = `tail -n +2 $dir/u.txt | awk '{printf "%.2f\n", $1}'`
    set g = `tail -n +2 $dir/g.txt | awk '{printf "%.2f\n", $1}'`
    set r = `tail -n +2 $dir/r.txt | awk '{printf "%.2f\n", $1}'`
    set i = `tail -n +2 $dir/i.txt | awk '{printf "%.2f\n", $1}'`
    set z = `tail -n +2 $dir/z.txt | awk '{printf "%.2f\n", $1}'`

    set sepmax = `echo "$field * 60.0" | bc -l | awk '{printf "%d\n", $1}'`
    echo "askSDSS: selecting objects within $sepmax arcsec of field centre, and fetching photo-zs..."
    if ($useV) then
      echo "askSDSS: selecting objects by Vega V-band magnitude < $maglimit:r"
      set Rvega = `tail -n +2 $dir/Vvega.txt`
    else
      echo "askSDSS: selecting objects by Vega R-band magnitude < $maglimit:r"
      set Rvega = `tail -n +2 $dir/Rvega.txt`
    endif

    touch junk ; rm junk ; touch junk
    set k = 0
    while ( $k < $#ra )
      @ k ++
      if ( $sep[$k]:r < $sepmax:r && $Rvega[$k]:r < $maglimit:r ) then

# Get photoz!
        set zpfile = ${objid[$k]}_zp.html
        set url = "http://casjobs.sdss.org/${DRX}/en/tools/explore/photoz.asp?id=${objid[$k]}"
        wget "$url" -O $zpfile -o ${zpfile}.log
        set fail = `grep ERROR ${zpfile}.log | head -1 | wc -l`
        if ($fail) then
          set zp = 99.99 
          set zperr = 99.99 
        else  
          set zp = `grep '>z<' $zpfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set zperr = `grep '>zErr<' $zpfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          if ($#zp == 0) then
            set zp = 99.99 
            set zperr = 99.99 
            set fail = 1
          endif  
        endif
        if ($fail) then
          echo "askSDSS: WARNING: photo-z fetch failed for object $objid[$k]"
          cat ${zpfile}.log
        endif
        
# Get i-band model parameters!
        set modelparfile = ${objid[$k]}_modelpars.html
        set url = "http://casjobs.sdss.org/${DRX}/en/tools/explore/OETOC.asp?id=${objid[$k]}"
        wget "$url" -O $modelparfile -o ${modelparfile}.log
        set fail = `grep ERROR ${modelparfile}.log | head -1 | wc -l`
        if ($fail) then
          set deVRad_i = -99.9
          set deVAB_i  = -99.9
          set deVPhi_i = -99.9
          set deVMag_i = 99.99
          set lnLDeV_i = 0.000000
          set expRad_i = -99.9
          set expAB_i  = -99.9
          set expPhi_i = -99.9
          set expMag_i = 99.99
          set lnLExp_i = 0.000000
          set PSFMag_i = 99.99
          set lnLStar_i = 0.000000
          set probPSF = -1
        else  
          set string = `cat $modelparfile | grep 'Parameters for imaging observation' | cut -d"'" -f2`
          set url = "http://casjobs.sdss.org/${DRX}/en/tools/explore/${string}"
          wget "$url" -O $modelparfile -o ${modelparfile}.log
          set deVRad_i = `grep '>deVRad_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set deVAB_i  = `grep '>deVAB_i<'  $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set deVPhi_i = `grep '>deVPhi_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set deVMag_i = `grep '>deVMag_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set lnLDeV_i = `grep '>lnLDeV_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set expRad_i = `grep '>expRad_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set expAB_i  = `grep '>expAB_i<'  $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set expPhi_i = `grep '>expPhi_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set expMag_i = `grep '>expMag_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set lnLExp_i = `grep '>lnLExp_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set PSFMag_i = `grep '>psfMag_i<' $modelparfile | cut -d'>' -f 9 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set lnLStar_i = `grep '>lnLStar_i<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%.3f\n", $1}'`
          set probPSF = `grep '>probPSF<' $modelparfile | cut -d'>' -f 5 | cut -d'<' -f 1 | awk '{printf "%d\n", $1}'`
# Hmm - could also get probPSF values (based on lnLstar)

          if ($#lnLDeV_i == 0) then
            set deVRad_i = -99.9
            set deVAB_i  = -99.9
            set deVPhi_i = -99.9
            set deVMag_i = 99.99
            set lnLDeV_i = 0.000000
            set expRad_i = -99.9
            set expAB_i  = -99.9
            set expPhi_i = -99.9
            set expMag_i = 99.99
            set lnLExp_i = 0.000000
            set PSFMag_i = 99.99
            set lnLStar_i = 0.000000
            set probPSF = -1
            set fail = 1
          endif  
        endif
        if ($fail) then
          echo "askSDSS: WARNING: model parameter fetch failed for object $objid[$k]"
          cat ${modelparfile}.log
        endif

# Print out catalogue line:
        echo "$objid[$k]   $ra[$k]   $dec[$k]   $sep[$k]   $dx[$k]   $dy[$k]   $zp  $zperr  $u[$k]  $g[$k]  $r[$k]  $i[$k]  $z[$k]  $deVRad_i     $deVAB_i     $deVPhi_i   $deVMag_i    $lnLDeV_i   $expRad_i     $expAB_i    $expPhi_i   $expMag_i    $lnLExp_i   $PSFMag_i    $lnLStar_i   $probPSF" >> junk

      endif  
    end
    echo "# objectid           ra          dec        sep      dx     dy    zp     zperr    u      g      r      i      z    deVRad_i  deVAB_i   deVPhi_i  deVMag_i  lnLDeV_i  expRad_i  expAB_i  expPhi_i  expMag_i  lnLExp_i  PSFMag_i  lnLstar_i   probPSF" > $catalogue

    set nobjects = `cat junk | wc -l`
    sort -n -k 4 junk >> $catalogue
    rm junk
    
  # Clean up:

    touch junk.html ; \rm -f *_zp.html* junk.html *_modelpars.html*
    if ($starlist == 0) \rm -rf $dir 

    echo "askSDSS: made object catalogue:"
  else
    echo "askSDSS: object catalogue already exists:"
    set nobjects = `tail -n +2 $catalogue | wc -l`
  endif
  echo "  $catalogue"
  echo "askSDSS: no of objects detected: $nobjects"

endif

#-----------------------------------------------------------------------
STARLIST:

if ($starlist) then

# Strip out relevant information from csv file, 
# and calculate secondary quantities.
    
  if ($none) then
    echo "askSDSS: no stars to be listed"
    goto ENDGAME
  endif
  
  if ($useV) then
    set starfile = ${name}_sep.lt.${maxsep:r}arcsec_V.lt.${maglimit}_stars.txt
  else
    set starfile = ${name}_sep.lt.${maxsep:r}arcsec_R.lt.${maglimit}_stars.txt
  endif  

  if ($klobber) then
    echo "askSDSS: clobbering old star list"
    \rm -f $starfile
  endif

  if ( ! -e $starfile ) then
  
  # Go back to directory holding all the data:

    set dir = ${csvfile:r}_tmp
    set pars = `head -1 $csvfile | sed s/,/\ /g`

  # Now construct list of objects, ordered by magnitude:
  # Include SDSS z band mag

    if ($useV) then
      echo "askSDSS: selecting stars by Vega V-band magnitude"
      set Rvega = `tail -n +2 $dir/Vvega.txt`
    else
      echo "askSDSS: selecting stars by Vega R-band magnitude"
      set Rvega = `tail -n +2 $dir/Rvega.txt`
    endif
    set sep = `tail -n +2 $dir/sep.txt`
    set type = `tail -n +2 $dir/type.txt`
# Star/galaxy separation: 
#  type 3 = galaxy
#  type 6 = star    

    echo "askSDSS: select if ( int(sep[k]) < $maxsep:r )"
    echo "askSDSS:    and if ( int(R/Vvega[k]) < $maglimit:r )"
    echo "askSDSS: then select if ( type[k] == 6 )"
    echo "askSDSS:          or if ( int(sep[k]) == 0 )"

    set z = `tail -n +2 $dir/z.txt`    
    set colour = `tail -n +2 $dir/g-r.txt`
    set ra = `tail -n +2 $dir/ra.txt   | awk '{printf "%.5f\n", $1}'`
    set dec = `tail -n +2 $dir/dec.txt | awk '{printf "%.5f\n", $1}'`
# Star list: dx and dy from star to object:
    set dx = `tail -n +2 $dir/dx.txt | awk '{printf "%.2f\n", $1 * -1}'`
    set dy = `tail -n +2 $dir/dy.txt | awk '{printf "%.2f\n", $1 * -1}'`

# # Write file - simple table format:
#     touch junk ; rm junk ; touch junk
#     set k = 0
#     while ( $k < $#ra)
#       @ k ++
#       if ( $sep[$k]:r < $maxsep:r && $Rvega[$k]:r < $maglimit:r ) then
#         if ( $type[$k] == 6 || $sep[$k]:r == 0 ) then
#           echo "$Rvega[$k]  $sep[$k]   $dx[$k]   $dy[$k]   $colour[$k]   $z[$k]   $ra[$k]   $dec[$k]" >> junk
#         endif
#       endif  
#     end
# 
#     if ($useV) then
#       echo "Vmag    sep   dx    dy    g-r     zmag       ra          dec" > $starfile
#     else
#       echo "Rmag    sep   dx    dy    g-r     zmag       ra          dec" > $starfile
#     endif
#     set nstars = `cat junk | wc -l`
#     sort -n junk >> $starfile
#     rm junk

# Write file - Keck starlist format:
    touch junk ; rm junk ; touch junk
    set k = 0
    while ( $k < $#ra)
      @ k ++
      if ( $sep[$k]:r < $maxsep:r && $Rvega[$k]:r < $maglimit:r ) then
        if ( $type[$k] == 6 || $sep[$k]:r == 0 ) then
          echo "$Rvega[$k]  $sep[$k]   $dx[$k]   $dy[$k]   $colour[$k]   $z[$k]   $ra[$k]   $dec[$k]" >> junk
        endif
      endif  
    end
    set nstars = `cat junk | wc -l`
    sort -n junk > junk2
    mv junk2 junk
    
    if ($nstars > 0) then

  # Identify primary target and write first line:    
      set sep = `awk '{print $2}' junk`
      echo "sep = $sep"
      set jj = `pickone.csh --index --first $sep`
      echo "jj = $jj"

      set x = `tail -n +$jj junk | head -1`
      set coords = `skycoor $x[7] $x[8] | sed s/':'/' '/g | sed s/'J'/' '/g`
      set name = "SDSSJ${coords[1]}${coords[2]}${coords[4]}${coords[5]}"
      set comments = "lgs=1"
      echo "$name  $coords.00  $comments" > $starfile

  # Now loop through all other targets and write other lines:    
      foreach j ( `seq $nstars` )
        set x = `tail -n +$j junk | head -1`
        set ttcoords = `skycoor $x[7] $x[8] | sed s/':'/' '/g | sed s/'J'/' '/g`
        set ttname = "    TT${ttcoords[2]}${ttcoords[3]:r}${ttcoords[5]}${ttcoords[6]:r}"
        if ($j == $jj) then
          set ttcomments = "  rmag=$x[1] sep=0(self-guide) dx=0 dy=0 pa=99"
        else
          set ttcomments = "  rmag=$x[1] sep=$x[2] dx=$x[3] dy=$x[4] pa=99"
        endif
        echo "$ttname  $ttcoords.00  $ttcomments" >> $starfile
      end
      \rm -f junk
      echo "askSDSS: made new star list:"
    
    else
      echo "askSDSS: no starlist made."
    endif
    
  # Clean up:
    touch junk.html ; \rm -f *.html *.html.log junk*
    \rm -rf $dir $csvfile

  else
    echo "askSDSS: star list already exists:"
    set nstars = `tail -n +2 $starfile | wc -l`
  endif
  
  if ($nstars > 0) then
    echo "  $starfile"
    echo "askSDSS: no of stars detected: $nstars"
  endif  
  
endif

#-----------------------------------------------------------------------
ENDGAME:

echo "askSDSS: all done"

FINISH:

#=======================================================================
