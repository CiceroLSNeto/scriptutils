#!/bin/tcsh
#=======================================================================
#+
# NAME:
#   name2email
#
# PURPOSE:
#   Search the web for email addresses associated with the given name
#
# COMMENTS:
#
# USAGE:
#
#   name2email name
#
# INPUTS:
#   name
#
# OPTIONAL INPUTS:
#   -g --guess  domain
#   -h --help
#
# OUTPUTS:
#   stdout
#
# EXAMPLES:
#   name2email  Phil Marshall
#
# BUGS:
#
# REVISION HISTORY:
#   2007-03-02  started Marshall (UCSB)
#-
#=======================================================================

# Options and arguments:

set name = ( )
set help = 0
set guesseddomain = 0
set vb = 0

unset noclobber
unalias rm

while ( $#argv > 0 )
   switch ($argv[1])
   case -h:        #  print help
      set help = 1
      shift argv
      breaksw
   case --{help}:  
      set help = 1
      shift argv
      breaksw
   case -v:        #  be verbose
      set vb = 1
      shift argv
      breaksw
   case --{verbose}:  
      set vb = 1
      shift argv
      breaksw
   case -g:  #  guess domain
      shift argv
      set guesseddomain = $argv[1]
      shift argv
      breaksw
   case --{guess}: 
      shift argv
      set guesseddomain = $argv[1]
      shift argv
      breaksw
   case *:         #  name - words separated by whitespace
      set name = ( $name $argv[1] )
      shift argv
      breaksw
   endsw
end

#-----------------------------------------------------------------------

# Catch stupidities:

if ( $help == 1 || $#name == 0 ) then
  print_script_header.csh $0
  goto FINISH
endif

if ($vb) echo "name2email: searching for email addresses for $name" 

if ($guesseddomain == 0) then
  set guesseddomain = ""
  set guesseddomain2 = ""
else
  set guesseddomain2 = `echo $guesseddomain | cut -c1 | tr '[:lower:]' '[:upper:]'`
  if ($vb) echo "name2email: using the guessed domain $guesseddomain to help" 
endif  

#-----------------------------------------------------------------------

# Construct google url, and make output filename as well:

# Example URLs:

# Search for "Phil Marshall"
# http://www.google.com/search?as_q=Phil+Marshall&hl=en&num=100&btnG=Google+Search&as_epq=&as_oq=&as_eq=&lr=&as_ft=i&as_filetype=&as_qdr=all&as_nlo=&as_nhi=&as_occt=any&as_dt=i&as_sitesearch=&as_rights=&safe=images


set string1 = "http://www.google.com/search?as_q="
set string2 = "&hl=en&num=10&btnG=Google+Search&as_epq=&as_oq=&as_eq=&lr=&as_ft=i&as_filetype=&as_qdr=all&as_nlo=&as_nhi=&as_occt=any&as_dt=i&as_sitesearch=&as_rights=&safe=images"

# Loop over addresses:

set tmpfile = .name2email.tmp
set urlfile = .name2email.urls
set addressfile = .name2email.addresses


set url = "${string1}"
foreach word ( $name )
  set url = "${url}${word}+"
end
set url = "${url}${string2}"

\rm -f $tmpfile $urlfile $addressfile
links -source "$url" > $tmpfile
strings $tmpfile | sed s/'href='/'+'/g | \
  tr '+' '\n' | strings | \
  grep -e 'http' | grep -v '=http' | grep -v 'http-' | grep -v ' http' | \
  tr '"' '\n' | strings | \
  grep -e 'http' | grep -v '=http' | grep -v 'http-' | grep -v ' http' | \
  grep -v google | grep -v cache | \
  grep -v 'content-type' | grep -v 'answers.com' | grep -v '.pdf' >! $urlfile

# Now search each of the pages listed here, as google is good at masking out
# email addresses:

if ($vb) echo -n "name2email: " 
foreach url ( `cat $urlfile` )
  lynx --dump --nolist "$url" >! $tmpfile
  cat $tmpfile | grep -e '@' | \
  grep -v '@ARTICLE' | grep -v ' @ ' | \
    grep -e "$guesseddomain" -e "$guesseddomain2" >> $addressfile
  if ($vb) echo -n "."  
end
if ($vb) echo " "  


set nlines = `cat $addressfile | wc -l`
if ($nlines > 0) then
  sort $addressfile | uniq
else
  if ($vb) echo "name2email: no addresses found."  
  if ($vb) echo "name2email: top 10 google hits:"  
  cat $urlfile 
endif

\rm -f $tmpfile $urlfile $addressfile  
# Done.

if ($vb) echo "name2email: all done."

FINISH:

#=======================================================================
