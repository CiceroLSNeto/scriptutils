#!/bin/tcsh
#=======================================================================
#+
# NAME: 
#   cvsdiff
#
# PURPOSE:
#   Compare two revisions of the same file with sdiff output
#
# COMMENTS:
#   Only subset of cvs diff and sdiff options are available.
#   are saved to $cwd. sdiff output reads with oldest file on the left;
#   here the repository current revision is defined as "older" than the
#   local copy.
#
# INPUTS:
#   a.file
#   
# OPTIONAL INPUTS:
#   -r		Revision number. Up to two -r flags can be specified.
#   -h --help
#
# OUTPUTS:
#   stdout		sdiff stream
#   a.file.vx.xx  Reconstructed revision files
#
# BUGS:
#   - Only the last (non -r) argument is treated as the target filename
#   - Unidentified options are not flagged
#   - Interpretation of rev array options is clunky
#   - FAILS HARD WHEN PASSWORDS ARE REQUIRED
#   - patch oftend fails to complete cleanly. UNSOLVED!
#
# REVISION HISTORY:
#   2005-04-20  started Marshall (KIPAC)
#-
#=======================================================================

# Options and arguments:

unset file
set help = 0
set nrev = 0
set rev = ( 0 )

while ( $#argv > 0 )
   switch ($argv[1])
   case -h:           #  print help
      set help = 1
      shift argv
      breaksw
   case --{help}:  
      set help = 1
      shift argv
      breaksw
   case -r:        #  Revision numbers
      shift argv
      set rev = ( $rev[1-] $argv[1] )
      @ nrev ++
      shift argv
      breaksw
   case *:         #  The file: only keep last one in list
      set file = $argv[1]
      shift argv
      breaksw
   endsw
end

#-----------------------------------------------------------------------

if ($help) then
  print_script_header.csh $0
  goto FINISH
endif

# Catch stupidities:

if ( ! $?file ) then
  echo "cvsdiff: no file supplied"
  echo "         cvsdiff [-r num1 -r num2] file"
  goto FINISH
endif
if ( ! -e $file) then 
  echo "cvsdiff: file not found ($file)"
  echo "         cvsdiff [-r num1 -r num2] file"
  goto FINISH
endif
if ( $nrev > 2 ) then
  echo "cvsdiff: no more than two revisions can be specified"
  echo "         cvsdiff [-r num1 -r num2] file"
  goto FINISH
endif

# Get difference information from repository:

# Tricky book-keeping: 
#
# Case 1: reconstruct current revision, nrev = 0
# Case 2: reconstruct named revision, nrev = 1
# Case 3: reconstruct 2 named revisions, nrev = 2

if ( $nrev == 0 ) then
  set i = -1
# Extract current revision number from cvs log:
  set rev[1]=`cvs log -h $file | grep head | cut -d":" -f2`
else
  set i = 0
endif

set revision = ( 0 0 )

# Loop over revisions, generating patched revisions of the file.

set OK = 1
while ( $i < $nrev )

# Loop counter:
  @ i ++

# rev array was over-filled by options code...  
  @ j = $i + 1
  if ( $nrev == 0 ) then
    @ i ++
  endif
    
# Read off revision number from command line variables:
  set revision[$i] = $rev[$j]
  
  set output = "$file.v$revision[$i]"
    
# Set up flags for cvs diff:
  set string=" -r $rev[$j] "

# Query repository::
  set patchscript = $output.patch
  cvs diff $string $file > $patchscript

# Measure script file length; either exit with no differences...
  set n=`cat $patchscript | wc -l`

  if ( $n == "0" ) then
    echo "  $file is identical to repository copy."
    cp $file $output
    chmod 644 $output
    \rm $patchscript
    goto FINISH
    
  else
    
# ... or trim header and pipe into patch, saving reconstructed revisions:  

#     echo "  Reconstructing revision number $revision[$i]..."

    @ n = $n - 4
    tail -$n $patchscript > junk ; mv junk $patchscript
    
#    stripCR.csh $patchscript
    
    set log = $patchscript.log
    patch -o $output $file $patchscript > $log

# Tidy up:  
    chmod 644 $output

    set nfail = `grep FAILED $log | wc -l`
    if ( $nfail > 0 ) then
      echo "$output not patched cleanly:"
      cat $log
      echo "patch script: $patchscript"
      set OK = 0
    else
      \rm $patchscript $log  
    endif   

  endif

end

if ( $OK ) then

# Now have either one or two old revisions.
# Do the appropriate sdiff to FINISH:

  if ( $nrev < 2 ) then
    sdiff $file.v$revision[1] $file
  else  
    sdiff $file.v$revision[1] $file.v$revision[2]
  endif

endif

FINISH:
